#pragma once
#include "token.hpp"
#include "ast.hpp" // We need our AST node definitions
#include <vector>
#include <memory>

class Parser {
public:
    Parser(const std::vector<Token>& tokens);

    // The main entry point for parsing.
    std::unique_ptr<ProgramNode> parse();

private:
    std::vector<Token> m_tokens;
    size_t m_current = 0;

    // Helper methods to navigate the token stream
    Token peek();
    Token previous();
    Token advance();
    bool isAtEnd();
    bool check(TokenType type);
    Token consume(TokenType type, const std::string& message);

    // Parsing methods for each grammar rule
    std::unique_ptr<FunctionDefinitionNode> parseFunctionDefinition();
    std::unique_ptr<StatementNode> parseStatement();
    std::unique_ptr<FunctionCallStatementNode> parseFunctionCallStatement();
    std::unique_ptr<ExpressionNode> parseExpression();
    std::unique_ptr<ExpressionNode> parseTerm();
    std::unique_ptr<ExpressionNode> parsePrimary();
};